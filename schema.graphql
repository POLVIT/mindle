type Connected_service {
    _id: ObjectId
    bakalari: Boolean
    edmodo: Boolean
    facebook: Boolean
    googleClassroom: Boolean
    user_id: String
}

input Connected_serviceInsertInput {
    user_id: String
    bakalari: Boolean
    facebook: Boolean
    edmodo: Boolean
    googleClassroom: Boolean
    _id: ObjectId
}

input Connected_serviceQueryInput {
    user_id_lte: String
    _id_lte: ObjectId
    user_id: String
    _id_exists: Boolean
    facebook_exists: Boolean
    user_id_exists: Boolean
    _id_lt: ObjectId
    edmodo_exists: Boolean
    bakalari_exists: Boolean
    _id_nin: [ObjectId]
    googleClassroom: Boolean
    _id: ObjectId
    AND: [Connected_serviceQueryInput!]
    facebook_ne: Boolean
    googleClassroom_ne: Boolean
    _id_gte: ObjectId
    googleClassroom_exists: Boolean
    bakalari: Boolean
    facebook: Boolean
    user_id_lt: String
    edmodo_ne: Boolean
    bakalari_ne: Boolean
    edmodo: Boolean
    user_id_gte: String
    OR: [Connected_serviceQueryInput!]
    _id_gt: ObjectId
    _id_ne: ObjectId
    user_id_gt: String
    user_id_ne: String
    user_id_in: [String]
    _id_in: [ObjectId]
    user_id_nin: [String]
}

enum Connected_serviceSortByInput {
    _ID_ASC
    _ID_DESC
    USER_ID_ASC
    USER_ID_DESC
}

input Connected_serviceUpdateInput {
    user_id: String
    bakalari: Boolean
    edmodo: Boolean
    googleClassroom_unset: Boolean
    bakalari_unset: Boolean
    googleClassroom: Boolean
    _id_unset: Boolean
    user_id_unset: Boolean
    facebook: Boolean
    facebook_unset: Boolean
    edmodo_unset: Boolean
    _id: ObjectId
}

type DeleteManyPayload {
    deletedCount: Int!
}

type InsertManyPayload {
    insertedIds: [ObjectId]!
}

type Mutation {
    deleteManyConnected_services(
        query: Connected_serviceQueryInput
    ): DeleteManyPayload
    deleteManySettings(query: SettingQueryInput): DeleteManyPayload
    deleteManyTasks(query: TaskQueryInput): DeleteManyPayload
    deleteManyUsers(query: UserQueryInput): DeleteManyPayload
    deleteOneConnected_service(
        query: Connected_serviceQueryInput!
    ): Connected_service
    deleteOneSetting(query: SettingQueryInput!): Setting
    deleteOneTask(query: TaskQueryInput!): Task
    deleteOneUser(query: UserQueryInput!): User
    insertManyConnected_services(
        data: [Connected_serviceInsertInput!]!
    ): InsertManyPayload
    insertManySettings(data: [SettingInsertInput!]!): InsertManyPayload
    insertManyTasks(data: [TaskInsertInput!]!): InsertManyPayload
    insertManyUsers(data: [UserInsertInput!]!): InsertManyPayload
    insertOneConnected_service(
        data: Connected_serviceInsertInput!
    ): Connected_service
    insertOneSetting(data: SettingInsertInput!): Setting
    insertOneTask(data: TaskInsertInput!): Task
    insertOneUser(data: UserInsertInput!): User
    replaceOneConnected_service(
        data: Connected_serviceInsertInput!
        query: Connected_serviceQueryInput
    ): Connected_service
    replaceOneSetting(
        data: SettingInsertInput!
        query: SettingQueryInput
    ): Setting
    replaceOneTask(query: TaskQueryInput, data: TaskInsertInput!): Task
    replaceOneUser(query: UserQueryInput, data: UserInsertInput!): User
    updateManyConnected_services(
        query: Connected_serviceQueryInput
        set: Connected_serviceUpdateInput!
    ): UpdateManyPayload
    updateManySettings(
        set: SettingUpdateInput!
        query: SettingQueryInput
    ): UpdateManyPayload
    updateManyTasks(
        query: TaskQueryInput
        set: TaskUpdateInput!
    ): UpdateManyPayload
    updateManyUsers(
        query: UserQueryInput
        set: UserUpdateInput!
    ): UpdateManyPayload
    updateOneConnected_service(
        query: Connected_serviceQueryInput
        set: Connected_serviceUpdateInput!
    ): Connected_service
    updateOneSetting(
        query: SettingQueryInput
        set: SettingUpdateInput!
    ): Setting
    updateOneTask(query: TaskQueryInput, set: TaskUpdateInput!): Task
    updateOneUser(query: UserQueryInput, set: UserUpdateInput!): User
    upsertOneConnected_service(
        query: Connected_serviceQueryInput
        data: Connected_serviceInsertInput!
    ): Connected_service
    upsertOneSetting(
        data: SettingInsertInput!
        query: SettingQueryInput
    ): Setting
    upsertOneTask(query: TaskQueryInput, data: TaskInsertInput!): Task
    upsertOneUser(query: UserQueryInput, data: UserInsertInput!): User
}

scalar ObjectId

type Query {
    connected_service(query: Connected_serviceQueryInput): Connected_service
    connected_services(
        sortBy: Connected_serviceSortByInput
        query: Connected_serviceQueryInput
        limit: Int = 100
    ): [Connected_service]!
    setting(query: SettingQueryInput): Setting
    settings(
        limit: Int = 100
        sortBy: SettingSortByInput
        query: SettingQueryInput
    ): [Setting]!
    task(query: TaskQueryInput): Task
    tasks(
        query: TaskQueryInput
        limit: Int = 100
        sortBy: TaskSortByInput
    ): [Task]!
    user(query: UserQueryInput): User
    users(
        sortBy: UserSortByInput
        query: UserQueryInput
        limit: Int = 100
    ): [User]!
}

type Setting {
    _id: ObjectId
    store_credentials_locally: Boolean
    user_id: String
}

input SettingInsertInput {
    store_credentials_locally: Boolean
    _id: ObjectId
    user_id: String
}

input SettingQueryInput {
    _id_in: [ObjectId]
    _id_gte: ObjectId
    _id_lt: ObjectId
    user_id_lte: String
    user_id_nin: [String]
    _id_ne: ObjectId
    user_id_gte: String
    AND: [SettingQueryInput!]
    user_id_ne: String
    store_credentials_locally_exists: Boolean
    store_credentials_locally: Boolean
    _id_exists: Boolean
    user_id_gt: String
    _id_nin: [ObjectId]
    store_credentials_locally_ne: Boolean
    _id_lte: ObjectId
    _id_gt: ObjectId
    user_id_exists: Boolean
    OR: [SettingQueryInput!]
    user_id_lt: String
    user_id_in: [String]
    _id: ObjectId
    user_id: String
}

enum SettingSortByInput {
    USER_ID_ASC
    USER_ID_DESC
    _ID_ASC
    _ID_DESC
}

input SettingUpdateInput {
    store_credentials_locally_unset: Boolean
    _id: ObjectId
    _id_unset: Boolean
    user_id: String
    user_id_unset: Boolean
    store_credentials_locally: Boolean
}

type Task {
    _id: ObjectId
    body: String
    date: Float
    props: String
    resolved: Boolean
    sender: String
    service: String
    starred: Boolean
    user_id: String
}

input TaskInsertInput {
    body: String
    starred: Boolean
    user_id: String
    date: Float
    resolved: Boolean
    _id: ObjectId
    sender: String
    props: String
    service: String
}

input TaskQueryInput {
    props_lte: String
    props_in: [String]
    body_nin: [String]
    service: String
    sender_lte: String
    resolved_exists: Boolean
    service_in: [String]
    _id_ne: ObjectId
    props: String
    body_exists: Boolean
    sender_gte: String
    _id: ObjectId
    service_nin: [String]
    date_gt: Float
    props_gt: String
    sender_gt: String
    date_nin: [Float]
    body_in: [String]
    service_ne: String
    date_lte: Float
    sender: String
    _id_exists: Boolean
    props_ne: String
    user_id_gt: String
    OR: [TaskQueryInput!]
    starred: Boolean
    props_nin: [String]
    service_gt: String
    sender_nin: [String]
    user_id_ne: String
    date_exists: Boolean
    service_gte: String
    AND: [TaskQueryInput!]
    date: Float
    user_id_lte: String
    service_lte: String
    props_gte: String
    date_in: [Float]
    user_id_lt: String
    sender_ne: String
    starred_ne: Boolean
    service_exists: Boolean
    starred_exists: Boolean
    body_gte: String
    user_id_in: [String]
    _id_lt: ObjectId
    body_lt: String
    user_id: String
    user_id_gte: String
    sender_exists: Boolean
    _id_gt: ObjectId
    _id_in: [ObjectId]
    sender_in: [String]
    body_lte: String
    _id_nin: [ObjectId]
    props_exists: Boolean
    resolved_ne: Boolean
    date_ne: Float
    body: String
    _id_lte: ObjectId
    props_lt: String
    body_ne: String
    user_id_exists: Boolean
    date_lt: Float
    resolved: Boolean
    date_gte: Float
    service_lt: String
    sender_lt: String
    _id_gte: ObjectId
    body_gt: String
    user_id_nin: [String]
}

enum TaskSortByInput {
    USER_ID_DESC
    SENDER_DESC
    DATE_DESC
    _ID_ASC
    USER_ID_ASC
    SERVICE_DESC
    BODY_DESC
    _ID_DESC
    PROPS_DESC
    BODY_ASC
    SENDER_ASC
    PROPS_ASC
    SERVICE_ASC
    DATE_ASC
}

input TaskUpdateInput {
    props_unset: Boolean
    body_unset: Boolean
    resolved: Boolean
    service_unset: Boolean
    date: Float
    starred: Boolean
    props: String
    body: String
    service: String
    sender_unset: Boolean
    _id_unset: Boolean
    _id: ObjectId
    user_id: String
    starred_unset: Boolean
    user_id_unset: Boolean
    date_unset: Boolean
    resolved_unset: Boolean
    date_inc: Float
    sender: String
}

type UpdateManyPayload {
    matchedCount: Int!
    modifiedCount: Int!
}

type User {
    _id: ObjectId
    email: String
    user_id: String
    username: String
}

input UserInsertInput {
    _id: ObjectId
    user_id: String
    username: String
    email: String
}

input UserQueryInput {
    _id_in: [ObjectId]
    username_ne: String
    username: String
    email_nin: [String]
    email_gte: String
    user_id_in: [String]
    email_gt: String
    AND: [UserQueryInput!]
    email_lt: String
    _id_nin: [ObjectId]
    username_gt: String
    username_lt: String
    email_lte: String
    email_ne: String
    _id_gt: ObjectId
    user_id_lte: String
    email: String
    user_id_gte: String
    username_gte: String
    user_id_gt: String
    email_in: [String]
    _id_gte: ObjectId
    _id_ne: ObjectId
    user_id_nin: [String]
    user_id_exists: Boolean
    username_in: [String]
    user_id_ne: String
    _id_lte: ObjectId
    email_exists: Boolean
    user_id_lt: String
    _id: ObjectId
    username_lte: String
    _id_exists: Boolean
    user_id: String
    username_exists: Boolean
    username_nin: [String]
    OR: [UserQueryInput!]
    _id_lt: ObjectId
}

enum UserSortByInput {
    USERNAME_ASC
    USERNAME_DESC
    EMAIL_ASC
    EMAIL_DESC
    _ID_ASC
    _ID_DESC
    USER_ID_ASC
    USER_ID_DESC
}

input UserUpdateInput {
    email_unset: Boolean
    _id: ObjectId
    _id_unset: Boolean
    user_id: String
    user_id_unset: Boolean
    username: String
    username_unset: Boolean
    email: String
}
